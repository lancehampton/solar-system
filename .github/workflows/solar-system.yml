name: Solar System Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: Unit Testing
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017 # host:container
    env: # Takes precedence over env in the top level
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    strategy:
      matrix:
        nodejs_version: [18, 20]
        operating_system: [ubuntu-latest]
        exclude:
          - nodejs_version: 18
            operating_system: macos-latest
    runs-on: ${{ matrix.operating_system }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.nodejs_version }}

    - name: Cache NPM dependencies
      uses: actions/cache@v3
      with:
        path: node_modules # Folder where npm dependencies are installed
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

    - name: Install dependencies
      run: npm install

    - name: Run unit tests
      id: nodejs-unit-test
      run: npm test

    - name: Archive test report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: mocha-test-result
        path: test-results.xml

  code-coverage:
    name: Code Coverage
    container:
      image: node:18
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options:
          --name mongo
    env: # Takes precedence over env in the top level
      MONGO_URI: 'mongodb://mongo:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Not required when using job container above
    # - name: Setup NodeJS Version - 18
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: 18

    - name: Cache NPM dependencies
      uses: actions/cache@v3
      with:
        path: node_modules # Folder where npm dependencies are installed
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

    - name: Install dependencies
      run: npm install

    - name: Run code coverage
      continue-on-error: true
      run: npm run coverage

    - name: Archive code coverage report
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-report
        path: coverage
        retention-days: 5

  docker:
    needs: [unit-testing, code-coverage]
    name: Containerization
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dockerhub Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: GHCR Login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build for Testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker Image Test
        run: |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live

      # Build will use cache from previous step
      - name: Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

  dev-deploy:
    needs: [docker]
    outputs:
      APP_INGRESS_URL: ${{ steps.app-ingress-host.outputs.APP_INGRESS_HOST }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install kubectl CLI
        uses: azure/setup-kubectl@v3
        with:
          version: v1.26.0 # default is latest stable

      - name: Setup Local DNS
        run: |
          curl -L https://nip.io/nip.io -o ${{ github.workspace }}/nip \
            && chmod +x ${{ github.workspace }}/nip

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.8.0
        with:
          kubectl_version: v1.26.4
          config: .github/kind-config.yml

      # # Uncomment this step if you want to use a pre-existing cluster.
      # # Make sure to set the kubeconfig secret in the repo settings
      # - uses: azure/k8s-set-context@v3
      #   with:
      #       method: kubeconfig
      #       kubeconfig: <your kubeconfig>
      #       context: <context name> # current-context from kubeconfig is used as default

      - name: Get cluster details
        run: |
          kubectl version --short
          echo ---------------------------------
          kubectl get nodes

      - name: Create ${{ vars.NAMESPACE }} namespace
        run: |
          kubectl create namespace ${{ vars.NAMESPACE }}

      - name: Install NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=90s \

      # If using kind, ingress-nginx is exposed on localhost
      # If using a pre-existing cluster, use the following command to get the IP
      # echo "INGRESS_IP=$(kubectl -n ingress-nginx get service ingress-nginx-controller --output='jsonpath={.status.loadBalancer.ingress[0].ip}')" >> $GITHUB_ENV
      - name: Get Nginx Ingress Controller IP
        run: |
          echo "INGRESS_IP=localhost" >> $GITHUB_ENV
          echo "Debug: INGRESS_IP=$INGRESS_IP"
          echo "Debug: Service details in JSON:"
          kubectl -n ingress-nginx get service ingress-nginx-controller -o json

      - name: Replace tokens in manifest files
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '_{_'
          tokenSuffix: '_}_'
          files: '["kubernetes/development/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
          INGRESS_IP: ${{ env.INGRESS_IP }}

      - name: Create MongoDB secret
        run: |
          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -

      - name: Check files
        run: |
          cat kubernetes/development/*.yaml

      - name: Deploy to Dev Env
        run: |
          kubectl apply -f kubernetes/development

      - name: Set App Ingress Host URL
        id: app-ingress-host
        run: |
          echo "Debug: Cluster info:"
          kubectl cluster-info
          echo "Debug: Ingress objects in namespace:"
          kubectl get ingress -n ${{ vars.NAMESPACE }}
          echo "Debug: Ingress object in JSON:"
          kubectl -n ${{ vars.NAMESPACE }} get ingress -o json
          (echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath='{.items[0].spec.rules[0].host}')" >> $GITHUB_ENV)
          echo "Debug: APP_INGRESS_HOST=${{ env.APP_INGRESS_HOST }}"

  integration-test:
    name: Dev Integration Testing
    needs: [dev-deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Test URL output using CURL and JQ
        env:
          URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
        run: |
          echo $URL
          echo "---------------------------------"
          curl https://$URL/live -s -k | jq -r '.status' | grep -i live
